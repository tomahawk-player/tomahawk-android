buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.11.0'
    }
}

import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'android'

repositories {
    mavenCentral()
}

dependencies {
    compile "com.android.support:appcompat-v7:19.1.0"
    compile "com.android.support:support-v4:19.1.0"
    compile "se.emilsjolander:stickylistheaders:2.1.3"
    compile("ch.acra:acra:4.5.0"){
        transitive = false
    }
    compile "org.codehaus.jackson:jackson-core-asl:1.9.13"
    compile "org.codehaus.jackson:jackson-mapper-asl:1.9.13"
    compile "com.google.guava:guava:17.0"
    compile "com.squareup.picasso:picasso:2.1.1"
    compile "com.github.castorflex.verticalviewpager:library:19.0.0"
    compile "de.mrmaffen:vlc-android-sdk:1.0.1"
    compile "de.mrmaffen:rdio-android-sdk:1.0.0"
    compile "de.mrmaffen:deezer-android-sdk:1.0.0"
    compile files("libs/RemoteMetadataProvider.jar")
}

/*
 * Gets the version name from the latest Git tag
 */
def getNewVersionName = { ->
      boolean isChanged = 'git diff --cached'.execute().text.length() > 0 ||
              'git diff'.execute().text.length() > 0
      return 'git describe --tags' + isChanged ? "_modified" : ""
}

android {
    compileSdkVersion 19
    buildToolsVersion "19.1.0"

    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 19
        versionName '0.55'
        versionCode 0550
        ndk {
            moduleName "libspotifywrapper"
            stl "stlport_static"
            ldLibs "log", "OpenSLES"
            cFlags " -std=c++0x -D__STDC_INT64__"
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/ASL2.0'
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            jniLibs.srcDir 'libs'
            jni.srcDirs = [] //disable automatic ndk-build call
        }

        // Move the tests to tests/java, tests/res, etc...
        instrumentTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }

    buildTypes {
        release {
            zipAlign true
            runProguard true
            proguardFile 'proguard-android.txt'
            applicationVariants.all { variant ->
                def file = variant.outputFile
                variant.outputFile = new File((String) file.parent,
                        file.name.replace(".apk", "-" + getNewVersionName() + ".apk"))
            }
        }
        debug {
            zipAlign true
        }
    }

    productFlavors {
        arm {
            versionName getNewVersionName() + "_arm"
            versionCode Integer.parseInt("1" + defaultConfig.versionCode)
            ndk {
                abiFilters "armeabi", "armeabi-v7a"
            }
        }
    }
}

////////////////////////////////////////////////////
// NDK Support (by https://gist.github.com/pboos) //
////////////////////////////////////////////////////
// Make sure the environment variable $ANDROID_NDK_HOME is set:
// example: ANDROID_NDK_HOME /home/maffen/SDKs/android-ndk-r8e
task ndkBuild(type: Exec) {
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        commandLine new File((String) System.env.ANDROID_NDK_HOME, 'ndk-build.cmd')
    } else {
        commandLine new File((String) System.env.ANDROID_NDK_HOME, 'ndk-build')
    }
}

tasks.withType(JavaCompile) {
    compileTask -> compileTask.dependsOn ndkBuild
}

/*
 * Include the file "signingconfig.gradle" (which defines the signingConfig), if it exists
 * Example of the contents of such "signingconfig.gradle":
 *
 * android {
 *    signingConfigs {
 *       release {
 *           storeFile file("key.keystore")
 *           storePassword "password"
 *           keyAlias "alias"
 *           keyPassword "password"
 *       }
 *    }
 *
 *    buildTypes {
 *       release {
 *           signingConfig signingConfigs.release
 *       }
 *    }
 * }
 *
 */
if (new File("signingconfig.gradle").exists()) {
    apply from: "signingconfig.gradle";
}